name: CI/CD Pipeline

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: purnachandraredddy/akamai-project
  PYTHON_VERSION: "3.11"
  HELM_VERSION: "3.13.0"
  KUBECTL_VERSION: "1.28.0"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: rickmorty_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        black --check app/
        isort --check-only app/

    - name: Run security checks
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        
    - name: Run type checking
      run: |
        mypy app/ --ignore-missing-imports

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/rickmorty_test
        REDIS_URL: redis://localhost:6379/0
        RICK_MORTY_API_URL: https://rickandmortyapi.com/api
        LOG_LEVEL: DEBUG
      run: |
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/rickmorty_test
        REDIS_URL: redis://localhost:6379/0
        RICK_MORTY_API_URL: https://rickandmortyapi.com/api
        LOG_LEVEL: DEBUG
      run: |
        pytest tests/integration/ -v

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          htmlcov/
          bandit-report.json
          coverage.xml

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          APP_VERSION=${{ github.sha }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Install Syft
      uses: anchore/sbom-action/download-syft@v0

    - name: Install ORAS
      run: |
        curl -LO https://github.com/oras-project/oras/releases/latest/download/oras_1.1.0_linux_amd64.tar.gz
        tar -zxf oras_1.1.0_linux_amd64.tar.gz
        sudo mv oras /usr/local/bin/oras
        chmod +x /usr/local/bin/oras
        oras version

    - name: Generate and Push SBOM
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Wait for image to be available
        sleep 10
        
        # Generate SBOM for the image we just built (specify platform for consistency)
        syft ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --platform linux/amd64 -o spdx-json > sbom.spdx.json
        
        # Login to GHCR for ORAS
        echo "${{ secrets.GITHUB_TOKEN }}" | oras login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
        
        # Push SBOM as an artifact
        oras push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sbom-${{ github.sha }} \
          --artifact-type application/spdx+json \
          sbom.spdx.json:application/spdx+json

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Create kind cluster
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: staging
        config: .github/kind-config.yaml

    - name: Load Docker image to kind
      run: |
        kind load docker-image ${{ needs.build.outputs.image-tag }} --name staging

    - name: Deploy with Helm
      run: |
        helm upgrade --install rick-morty-staging ./helm/rick-morty-app \
          --namespace rick-morty-staging --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set postgresql.enabled=true \
          --set redis.enabled=true \
          --set ingress.enabled=false \
          --wait --timeout=10m

    - name: Run smoke tests
      run: |
        kubectl port-forward -n rick-morty-staging svc/rick-morty-staging 8080:80 &
        sleep 10
        
        # Health check
        curl -f http://localhost:8080/healthcheck || exit 1
        
        # API test
        curl -f http://localhost:8080/characters || exit 1
        
        # Metrics test  
        curl -f http://localhost:8080/metrics || exit 1

    - name: Run load tests
      run: |
        pip install locust
        locust -f tests/load/locustfile.py --host=http://localhost:8080 \
          --users 10 --spawn-rate 2 --run-time 60s --headless

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: ${{ env.KUBECTL_VERSION }}

    - name: Configure kubectl for production
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        kubectl config use-context production

    - name: Deploy with Helm
      run: |
        helm upgrade --install rick-morty-prod ./helm/rick-morty-app \
          --namespace rick-morty-prod --create-namespace \
          --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
          --set image.tag=${{ github.sha }} \
          --set postgresql.enabled=false \
          --set redis.enabled=false \
          --set secrets.databaseUrl="${{ secrets.DATABASE_URL }}" \
          --set secrets.redisUrl="${{ secrets.REDIS_URL }}" \
          --set secrets.jaegerEndpoint="${{ secrets.JAEGER_ENDPOINT }}" \
          --set ingress.hosts[0].host="${{ secrets.PRODUCTION_DOMAIN }}" \
          --set ingress.tls[0].hosts[0]="${{ secrets.PRODUCTION_DOMAIN }}" \
          --wait --timeout=15m

    - name: Verify deployment
      run: |
        kubectl rollout status deployment/rick-morty-prod -n rick-morty-prod --timeout=300s
        kubectl get pods -n rick-morty-prod
        
    - name: Run production smoke tests
      run: |
        # Wait for ingress to be ready
        sleep 30
        
        # Health check
        curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/healthcheck || exit 1
        
        # API test
        curl -f https://${{ secrets.PRODUCTION_DOMAIN }}/characters?per_page=5 || exit 1

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: python

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run OWASP ZAP Baseline Scan
      if: github.event_name == 'pull_request'
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:8080'
